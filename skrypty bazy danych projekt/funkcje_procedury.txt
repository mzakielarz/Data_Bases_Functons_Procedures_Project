
DELIMITER //
CREATE FUNCTION PobierzCeneGry(in_id_gra INT) RETURNS FLOAT(6,2)
BEGIN
  DECLARE cena_gry FLOAT(6,2);

  SELECT cena INTO cena_gry FROM Gry WHERE id_gra = in_id_gra;
  
  RETURN cena_gry;
END //
DELIMITER ;

DELIMITER //
CREATE FUNCTION PobierzSaldoUzytkownika(in_id_uzytkownika INT) RETURNS FLOAT(6,2)
BEGIN
  DECLARE saldo FLOAT(6,2);

  SELECT stan_konta INTO saldo FROM `Użytkownicy` WHERE id_uzytkownika = in_id_uzytkownika;
  
  RETURN saldo;
END //
DELIMITER ;

DELIMITER //
CREATE FUNCTION PobierzGryZCenaPonizej(in_cena_max FLOAT(6,2)) RETURNS VARCHAR(4000)
BEGIN
  DECLARE wynik VARCHAR(4000);

  SELECT GROUP_CONCAT(CONCAT('(', id_gra, ', "', tytul, '", ', cena, ', ', id_gatunek, ', ', id_wydawca, ')') SEPARATOR ', ')
    INTO wynik
    FROM Gry
    WHERE cena < in_cena_max;

  RETURN wynik;
END //
DELIMITER ;

DELIMITER //
CREATE FUNCTION PobierzTopGryGatunku(in_id_gatunek INT, in_limit INT) RETURNS VARCHAR(500)
BEGIN
  DECLARE result VARCHAR(500);
  SET result = (
    SELECT CONCAT('id_gra: ', g.id_gra, ', tytul: ', g.tytul, ', cena: ', g.cena, ', id_gatunek: ', g.id_gatunek, ', id_wydawca: ', g.id_wydawca, ', srednia_ocena: ', AVG(r.ocena))
    FROM Gry g
    INNER JOIN Recenzje r ON g.id_gra = r.id_gra
    WHERE g.id_gatunek = in_id_gatunek
    GROUP BY g.id_gra
    ORDER BY AVG(r.ocena) DESC
    LIMIT in_limit
  );
  RETURN result;
END //
DELIMITER ;

DELIMITER //

CREATE PROCEDURE PobierzTopGryGatunku(IN id_gatunek INT, IN limit_val INT)
BEGIN
  SELECT g.id_gra, g.tytul, g.cena, g.id_gatunek, g.id_wydawca, AVG(r.ocena) AS srednia_ocena
  FROM Gry g
  INNER JOIN Recenzje r ON g.id_gra = r.id_gra
  WHERE g.id_gatunek = id_gatunek
  GROUP BY g.id_gra
  ORDER BY srednia_ocena DESC
  LIMIT limit_val;
END //

DELIMITER ;

DELIMITER //
CREATE PROCEDURE WyswietlNajlepszeRecenzje()
BEGIN
  SELECT r.id_recenzji, r.id_uzytkownika, r.id_gra, r.ocena, r.tresc
  FROM Recenzje r
  INNER JOIN (
    SELECT id_gra, MAX(ocena) AS max_ocena
    FROM Recenzje
    GROUP BY id_gra
  ) t ON r.id_gra = t.id_gra AND r.ocena = t.max_ocena;
END //
DELIMITER ;

DELIMITER //

CREATE PROCEDURE ZaktualizujCeneGry(IN id_gra INT, IN nowa_cena FLOAT(6,2))
BEGIN
  IF EXISTS (SELECT * FROM gry WHERE id_gra = id_gra) THEN
    UPDATE gry SET cena = nowa_cena WHERE id_gra = id_gra LIMIT 1;
    SELECT 'Cena gry zaktualizowana' AS message;
  ELSE
    SELECT 'Gra o podanym identyfikatorze nie istnieje' AS message;
  END IF;
END //

DELIMITER ;

DELIMITER //
CREATE PROCEDURE WyswietlLiczbeGierZGatunku()
BEGIN
  SELECT g.id_gatunek, gt.nazwa, COUNT(*) AS liczba_gier
  FROM Gry g
  INNER JOIN Gatunki gt ON g.id_gatunek = gt.id_gatunku
  GROUP BY g.id_gatunek, gt.nazwa
  ORDER BY liczba_gier DESC;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE KupGre3(IN p_id_uzytkownika INT, IN p_id_gra INT)
BEGIN
  DECLARE v_cena_gry FLOAT(6,2);
  DECLARE v_saldo FLOAT(6,2);

  -- Sprawdzenie czy gra istnieje
  SELECT cena INTO v_cena_gry FROM Gry WHERE id_gra = p_id_gra;

  IF v_cena_gry IS NULL THEN
    SELECT 'Gra o podanym identyfikatorze nie istnieje' AS message;
  ELSE
    -- Sprawdzenie czy użytkownik już posiada daną grę
    SELECT stan_konta INTO v_saldo FROM Użytkownicy WHERE id_uzytkownika = p_id_uzytkownika;

    IF v_saldo < v_cena_gry THEN
      SELECT 'Brak wystarczających środków na koncie' AS message;
    ELSE
      -- Aktualizacja stanu konta użytkownika i dodanie gry do gier użytkownika
      START TRANSACTION;
        UPDATE Użytkownicy SET stan_konta = stan_konta - v_cena_gry WHERE id_uzytkownika = p_id_uzytkownika;
        INSERT INTO Gry_Uzytkownicy (id_uzytkownika, id_gra) VALUES (p_id_uzytkownika, p_id_gra);
      COMMIT;

      SELECT 'Gra zakupiona pomyślnie' AS message;
    END IF;
  END IF;
END //

DELIMITER ;